// <auto-generated />
using System;
using API_Encuesta_Movilidad_Laboral;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Encuesta_Movilidad_Laboral.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231016015119_update-estados")]
    partial class updateestados
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.ComunaRes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ComunasRes");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.ComunaTra", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ComunasTrab");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Encuesta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("dias_trabajo")
                        .HasColumnType("int");

                    b.Property<double>("km_recorrido")
                        .HasColumnType("float");

                    b.Property<int>("minutos_recorrido")
                        .HasColumnType("int");

                    b.Property<int>("rutUsuario")
                        .HasColumnType("int");

                    b.Property<int>("transporteId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("transporteId");

                    b.ToTable("Encuestas");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Estado", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Modalidad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Modalidades");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.SitLaboral", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("SitLaborales");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.TipoTransporte", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("esCompartido")
                        .HasColumnType("bit");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TiposTransportes");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Transporte", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("nombre")
                        .HasColumnType("int");

                    b.Property<int>("tipoTransporteId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("tipoTransporteId");

                    b.ToTable("Transportes");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("comunaResId")
                        .HasColumnType("int");

                    b.Property<int?>("comunaTraId")
                        .HasColumnType("int");

                    b.Property<int?>("encuestaId")
                        .HasColumnType("int");

                    b.Property<int>("estadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha_nac")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("marca_recup")
                        .HasColumnType("bit");

                    b.Property<int?>("modalidadId")
                        .HasColumnType("int");

                    b.Property<string>("nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sitLaboralId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("comunaResId");

                    b.HasIndex("comunaTraId");

                    b.HasIndex("encuestaId")
                        .IsUnique()
                        .HasFilter("[encuestaId] IS NOT NULL");

                    b.HasIndex("estadoId");

                    b.HasIndex("modalidadId");

                    b.HasIndex("sitLaboralId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Encuesta", b =>
                {
                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Transporte", "transporte")
                        .WithMany("encuestas")
                        .HasForeignKey("transporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transporte");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Transporte", b =>
                {
                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.TipoTransporte", "tipoTransporte")
                        .WithMany("transportes")
                        .HasForeignKey("tipoTransporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipoTransporte");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Usuario", b =>
                {
                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.ComunaRes", "comunaRes")
                        .WithMany("usuarios")
                        .HasForeignKey("comunaResId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.ComunaTra", "comunaTra")
                        .WithMany("usuarios")
                        .HasForeignKey("comunaTraId");

                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Encuesta", "encuesta")
                        .WithOne("usuario")
                        .HasForeignKey("API_Encuesta_Movilidad_Laboral.Entities.Usuario", "encuestaId");

                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Estado", "estado")
                        .WithMany("usuarios")
                        .HasForeignKey("estadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Modalidad", "modalidad")
                        .WithMany("usuarios")
                        .HasForeignKey("modalidadId");

                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.SitLaboral", "sitLaboral")
                        .WithMany("usuarios")
                        .HasForeignKey("sitLaboralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comunaRes");

                    b.Navigation("comunaTra");

                    b.Navigation("encuesta");

                    b.Navigation("estado");

                    b.Navigation("modalidad");

                    b.Navigation("sitLaboral");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API_Encuesta_Movilidad_Laboral.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.ComunaRes", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.ComunaTra", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Encuesta", b =>
                {
                    b.Navigation("usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Estado", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Modalidad", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.SitLaboral", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.TipoTransporte", b =>
                {
                    b.Navigation("transportes");
                });

            modelBuilder.Entity("API_Encuesta_Movilidad_Laboral.Entities.Transporte", b =>
                {
                    b.Navigation("encuestas");
                });
#pragma warning restore 612, 618
        }
    }
}
